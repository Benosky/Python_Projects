# -*- coding: utf-8 -*-
"""
Created on Mon Dec 04 03:07:36 2017

@author: BENJAMIN
"""


import numpy as np
from pandas_datareader import data as pdr
from pandas import DataFrame
import fix_yahoo_finance as yf
import matplotlib.pyplot as plt

#1. Write a Python program to download the historical data of Dow Jones Industrial Average
#(DJIA) over the last 15 years.

def calc_slippage(x,y,z):
    """ x is stock symbol, y is the start date in the format yyyy-mm-dd in quote 
    z is the end date in the format yyy-mm-dd in quote"""
    yf.pdr_override()
    x =pdr.get_data_yahoo(x, start=y,end=z)
    data = DataFrame(x)
    data['20 DEMA'] = data['Close'].ewm(span=200, adjust=False).mean()
    data['Close - 20 DEMA'] = data['Close']- data['20 DEMA']
    data['Signal'] = np.where(data['Close - 20 DEMA'] > 0, 1, 0)
    data['Signal'] = np.where(data['Close - 20 DEMA'] < 0, -1, data['Signal'])
    o = data["Open"][-1]
    h = data["High"][-1]
    l = data["Low"][-1]
    c = data["Close"][-1]
    v = data['Volume'][-1]
    bb = np.mean((((data['High']+data['Low'])/2)+data['Low'])/2) #Best_Bid
    ba = np.mean((((data['High']+data['Low'])/2)+data['High'])/2) #Best_Ask
    hbq = data['Signal'].value_counts()[1] #Highest_Bid_Quantity
    haq = data['Signal'].value_counts()[-1] #Highest_Ask_Quantity
    bop = ba * haq #Theoretical buy order position
    sop = bb * hbq #Theoretical sell order position
    fbq = v * (haq/(haq+hbq))*100 #Final buy quantity
    fsq = v * (hbq/(haq+hbq))*100 #Final sell quantity
    wpb = h * fbq # Worst possible buy position
    wps = l * fsq # Worst possible sell position
    wbdiff = wpb - bop # Worst buy difference
    wsdiff = wps - sop # Worst sell difference 
    if c<0:
        fbp1 = fbq * o #final buy position 1
        fsp1 = fsq * c #final sell position 1
        bdiff1 = fbp1 - bop # buy order difference 1
        sdiff1 = fsp1 - sop # sell order difference 1
        b_slippage1 = bdiff1/wbdiff # Buy order slippage 1
        s_slippage1 = sdiff1/wsdiff # Sell order slippage 1
        total_slippage = b_slippage1 + s_slippage1
        return total_slippage
    else:
        fbp2 = fbq * c # final buy position 2
        fsp2 = fsq * o # final sell position 2
        bdiff2 = fbp2 - bop #buy order difference 2
        sdiff2 = fsp2 - sop #sell order difference 2
        b_slippage2 = bdiff2/wbdiff # Buy order slippage 2
        s_slippage2 = sdiff2/wsdiff # Sell order slippage 2
        total_slippage = b_slippage2 + s_slippage2
        return total_slippage



yf.pdr_override()
stock =["^DJI"]
dji =pdr.get_data_yahoo(stock, start="2002-12-3",end="2017-12-3")

#download data into DataFrame
data = DataFrame(dji)

#2 Construct a simple trading system that goes long when DJIA closes above its 20 Day
#Exponential Moving Average of Close Prices (20 DEMA) and closes in position and goes short
#when prices close below the 20 DEMA.

data['20 DEMA'] = data['Close'].ewm(span=200, adjust=False).mean()
data['Close -20 DEMA'] = data['Close']- data['20 DEMA']
data['Signal'] = np.where(data['Close -20 DEMA'] > 0, 1, 0)
data['Signal'] = np.where(data['Close -20 DEMA'] < 0, -1, data['Signal'])
data['Signal'][0]= 1 #To correct for data['20 DEMA'][0]=data['Close'][0]
best_bid = np.mean((((data['High']+data['Low'])/2)+data['Low'])/2) 
best_ask = np.mean((((data['High']+data['Low'])/2)+data['High'])/2)
best_ask 

# Determine the size
initial_investment= float(10000.0)
sub_investment = float(1000.0)
investment = [initial_investment]
for i in range(1,len(data['Signal'])):
    investment.append(sub_investment)
data['Sizing'] = investment/data['Close']

#Case 1: Consider frictionless trading
data['NextPosition'] = (data['Sizing']*data['Signal'])
data['Position'] = data['NextPosition'].shift(1)
data['Strategy Returns'] = data['Close'].pct_change()*data['Position'] 


#Case 2: Consider Real Trading
data['Trade'] = data['NextPosition'] - data['Position']
data['Cost'] = data['Trade'].abs()*calc_slippage("^DJI","2002-12-3","2017-12-3")
data['Return Less Cost'] = data['Strategy Returns']-data['Cost']

data['Strategy Returns'].plot(grid=True,figsize=(8,5),label = 'Strategy Returns')
plt.show()

data['Return Less Cost'].plot(grid=True,figsize=(9,6), label = 'Return Less Cost')
plt.show()
